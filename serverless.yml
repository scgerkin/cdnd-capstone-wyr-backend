service:
  name: would-you-rather-backend

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    LOG_LEVEL: debug

    QUESTIONS_TABLE: questions-${self:service.name}-${self:provider.stage}
    QUESTION_ID_INDEX: questionId
    QUESTION_AUTHOR_ID_INDEX: authorId
    QUESTION_CREATED_AT_INDEX: createdAt

functions:
  AddNewQuestion:
    handler: src/controllers/questions/addNewQuestion.handler
    iamRoleStatementsName: AddNewQuestion
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QUESTIONS_TABLE}
    events:
      - http:
          method: post
          path: question
  DeleteQuestion:
    handler: src/controllers/questions/deleteQuestion.handler
    iamRoleStatementName: DeleteQuestion
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QUESTIONS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QUESTIONS_TABLE}/index/{self:provider.environment.QUESTION_ID_INDEX}
    events:
      - http:
          method: delete
          path: question/{questionId}

resources:
  Resources:
    QuestionsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.QUESTIONS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: ${self:provider.environment.QUESTION_ID_INDEX}
            AttributeType: S
          - AttributeName: ${self:provider.environment.QUESTION_AUTHOR_ID_INDEX}
            AttributeType: S
          - AttributeName: ${self:provider.environment.QUESTION_CREATED_AT_INDEX}
            AttributeType: S
        KeySchema:
          - AttributeName: ${self:provider.environment.QUESTION_AUTHOR_ID_INDEX}
            KeyType: HASH
          - AttributeName: ${self:provider.environment.QUESTION_CREATED_AT_INDEX}
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.QUESTION_ID_INDEX}
            KeySchema:
              - AttributeName: ${self:provider.environment.QUESTION_ID_INDEX}
                KeyType: HASH
            Projection:
              ProjectionType: ALL
